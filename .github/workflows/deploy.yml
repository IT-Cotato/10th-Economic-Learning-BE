# github repository Actions 페이지에 나타낼 이름
name: ripple CI/CD with Gradle

#on:
#  pull_request:
#    branches:
#      - develop
#    types:
#      - closed
#  workflow_dispatch: # (2).수동 실행도 가능하도록

on:
  pull_request:
    branches:
      - develop
    types:
      - opened  # PR이 생성될 때 실행되도록 설정
  workflow_dispatch: # 수동 실행도 가능하도록

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
    steps:
      ## jdk setting
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      ## gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 환경변수 .env 파일 생성 및 write
      - name: Set .env file with all environment variables
        run: |
          touch ./.env.prod
          echo "${{ secrets.ALL_ENV_VARS }}" > ./.env.prod
        shell: bash

      - name: gradle build를 위한 권한을 부여합니다.
        run: chmod +x gradlew

      - name: gradle build 중입니다.
        run: ./gradlew build -x test
        shell: bash # ci는 여기까지

      - name: docker image build 후 docker hub에 push합니다.
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/ripple .
          docker push ${{ secrets.DOCKER_USERNAME }}/ripple

      ## deploy to production
      - name: docker hub에서 pull 후 deploy합니다.
        uses: appleboy/ssh-action@master
        with:
          username: ${{ secrets.EC2_USERNAME }}
          host: ${{ secrets.EC2_HOST }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: GITHUB_SHA, DOCKER_USERNAME
          script: |
            export DOCKER_USERNAME=${DOCKER_USERNAME}
            sudo docker pull $DOCKER_USERNAME/ripple
            if [ "$(sudo docker ps -qa)" ]; then
                sudo docker rm -f $(sudo docker ps -qa)
            else
                echo "No containers to remove"
            fi
            docker compose -f ~/ubuntu/docker-compose.yml --env-file ./.env.prod up -d
            docker image prune -f
